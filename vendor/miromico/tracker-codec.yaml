# Uplink decoder decodes binary data uplink into a JSON object (optional)
# For documentation on writing encoders and decoders, see: https://thethingsstack.io/integrations/payload-formatters/javascript/
uplinkDecoder:
  fileName: tracker.js
  # Examples (optional)
  examples:
    - description: Welcome Message
      input:
        fPort: 100
        bytes: [0x01, 0x01, 0x05, 0x03, 0x00, 0x0a, 0x04, 0x39, 0x31, 0x37, 0x33, 0x7e, 0x37, 0x7e, 0x0d]
      output:
        data:
          device_type: 1
          device_sub_type: 1
          firmware_major: 5
          firmware_minor: 3
          firmware_build: 11
          reset_source: 4

    - description: Location Message
      input:
        fPort: 103
        bytes: [0x00, 0x02, 0x71, 0x79, 0x00, 0x02, 0x4c, 0x6e, 0x00, 0x39, 0x6f, 0xc4, 0xff, 0xf4, 0x4f, 0x95, 0x00, 0x00, 0x1d, 0x7e]
      output:
        data:
          gps_dat: 160121
          gps_tim: 150638
          gps_lat: 37.64164
          gps_lon: -7.66059
          gps_alt: 75.5

# Downlink encoder encodes JSON object into a binary data downlink (optional)
downlinkEncoder:
  fileName: tracker.js
  examples:
    - description: Send AT command
      input:
        at_command_ascii: "AT\0"
      output:
        fPort: 220
        bytes: [0x41, 0x54, 0x00]
    - description: Send ATZ command (device reset)
      input:
        at_command_ascii: "ATZ\0"
      output:
        fPort: 220
        bytes: [0x41, 0x54, 0x5a, 0x00]

# Downlink decoder decodes the encoded downlink message (optional, must be symmetric with downlinkEncoder)
downlinkDecoder:
  fileName: tracker.js
  examples:
    - description: Turn green
      input:
        fPort: 220
        bytes: [0x41, 0x54, 0x00]
      output:
        at_command_ascii: "ATZ\0"
